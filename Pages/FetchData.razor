@page "/fetchdata"
@using Newtonsoft.Json
@inject HttpClient Http

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@if(weatherResponse == null)
{
    <p><em>Loading API Response</em></p>
}
else
{
    <p>Current Temperature:</p>
    <h2>@weatherResponse.Main.Temperature °C</h2>
}

@code {
    private WeatherForecast[] forecasts;
    private Models.WeatherResponse weatherResponse;
    private const string endpoint = "http://api.openweathermap.org/data/2.5/weather?q=Argentina,ar&APPID=bb0335acd4e0f8ddc002c0472f2ffb57&units=Metric";

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");

        //weatherResponse = await Http.GetFromJsonAsync<Models.WeatherResponse>("http://api.openweathermap.org/data/2.5/weather?q=Argentina,ar&APPID=bb0335acd4e0f8ddc002c0472f2ffb57&units=Metric");
        string responseString = "";

        HttpResponseMessage response;
        try { response = await Http.GetAsync(endpoint); }
        catch (Exception ex) { throw ex; }

        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();
            weatherResponse = JsonConvert.DeserializeObject<Models.WeatherResponse>(json);
            //weatherResponse = JsonConvert.DeserializeObject(json, typeof(Models.WeatherResponse));
        }
    }

    public class WeatherForecast
    {
        public DateTime Date { get; set; }

        public int TemperatureC { get; set; }

        public string Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
